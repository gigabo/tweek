// Generated by CoffeeScript 1.8.0
(function() {
  require.def(['toy2d/canvas', 'toy2d/canvas_scale'], (function(_this) {
    return function(Canvas, CanvasScale) {
      var Disk, Game, HEIGHT, MAX_HEIGHT, Tower, WIDTH, canvas, clear, ctx, draw, get_move, init, init_canvas, init_controls, init_towers, initial_ratio, move_number, re_init_towers, rect, step, step_timer, tower_height, towers;
      WIDTH = void 0;
      HEIGHT = void 0;
      MAX_HEIGHT = void 0;
      canvas = void 0;
      ctx = void 0;
      towers = void 0;
      step_timer = void 0;
      initial_ratio = void 0;
      move_number = 1;
      tower_height = 1;
      Tower = (function() {
        function Tower(index) {
          this.index = index;
          this.disks = [];
        }

        return Tower;

      })();
      Disk = (function() {
        function Disk(width) {
          this.width = width;
        }

        return Disk;

      })();
      init = function() {
        init_canvas();
        init_controls();
        return init_towers();
      };
      init_canvas = function() {
        canvas = (new Canvas).jquery();
        ctx = canvas[0].getContext("2d");
        WIDTH = canvas.width();
        HEIGHT = canvas.height();
        MAX_HEIGHT = HEIGHT / 2;
        return new CanvasScale(canvas, 0.5);
      };
      init_controls = function() {
        $("#controls").append("<input type='text' id='tower_height'>");
        $("#controls").append("<input id='tower_refresh' type='button' value='Go'>");
        $("#tower_refresh").click(re_init_towers);
        return $("#tower_height").keydown((function(_this) {
          return function(evt) {
            if (evt.keyCode === 13) {
              return re_init_towers();
            }
          };
        })(this));
      };
      re_init_towers = function() {
        return init_towers($("#tower_height").val());
      };
      init_towers = function(new_height) {
        var _i, _results;
        if (step_timer) {
          clearInterval(step_timer);
        }
        if (new_height) {
          new_height = parseInt(new_height);
          if (!_.isNaN(new_height)) {
            if (new_height < 1) {
              tower_height = 1;
            } else if (new_height > MAX_HEIGHT) {
              tower_height = MAX_HEIGHT;
            } else {
              tower_height = new_height;
            }
          }
        }
        $("#tower_height").val(tower_height);
        move_number = 1;
        towers = _.map([0, 1, 2], (function(_this) {
          return function(i) {
            return new Tower(i);
          };
        })(this));
        towers[0].disks = _((function() {
          _results = [];
          for (var _i = 1; 1 <= tower_height ? _i <= tower_height : _i >= tower_height; 1 <= tower_height ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this)).chain().reverse().map((function(_this) {
          return function(i) {
            return new Disk(i);
          };
        })(this)).value();
        draw();
        return step_timer = setInterval(step, 1000 / Math.pow(tower_height, 1.3));
      };
      rect = function(x, y, w, h) {
        ctx.beginPath();
        ctx.rect(x, y, w, h);
        ctx.closePath();
        return ctx.fill();
      };
      clear = function() {
        return ctx.clearRect(0, 0, WIDTH, HEIGHT);
      };
      draw = function() {
        var col, disk, i, j, mult, _i, _j, _len, _len1, _ref, _results;
        clear();
        i = 0;
        _results = [];
        for (_i = 0, _len = towers.length; _i < _len; _i++) {
          col = towers[_i];
          j = 0;
          _ref = towers[i].disks;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            disk = _ref[_j];
            mult = MAX_HEIGHT / tower_height;
            rect(WIDTH / 4 * (i + 1) - disk.width * mult / 2, HEIGHT - MAX_HEIGHT / 2 - j * mult - mult, disk.width * mult, mult);
            j++;
          }
          _results.push(i++);
        }
        return _results;
      };
      get_move = function(move) {
        var direction, disk;
        disk = 1;
        while (!(move & 1)) {
          move >>= 1;
          disk += 1;
        }
        move >>= 1;
        direction = [[0, 1, 2], [0, 2, 1]][(disk + tower_height) % 2];
        return [direction[move % 3], direction[(move + 1) % 3]];
      };
      step = function() {
        var from, to, _ref;
        if (towers[1].disks.length !== tower_height) {
          _ref = get_move(move_number++), from = _ref[0], to = _ref[1];
          towers[to].disks.push(towers[from].disks.pop());
        } else {
          init_towers(tower_height + 1);
        }
        return draw();
      };
      return Game = (function() {
        function Game(canvas) {
          init();
        }

        return Game;

      })();
    };
  })(this));

}).call(this);
