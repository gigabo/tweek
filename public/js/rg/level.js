// Generated by CoffeeScript 1.8.0
(function() {
  require.def(['rg/rocket', 'rg/banner', 'rg/goal', 'rg/barrier', 'rg/score_manager', 'rg/score', 'rg/debug'], (function(_this) {
    return function(Rocket, Banner, Goal, Barrier, ScoreManager, Score, Debug) {
      var Level;
      return Level = (function() {
        function Level(game) {
          this.game = game;
          this.start_x = this.game.width / 2;
          this.start_y = this.game.height;
          this.goals = [];
          this.barriers = [];
          this.objects = [];
          this.scores = [];
          this.messages = [];
          this.score_manager = new ScoreManager(this.game);
          this.success_message = "Success!";
          this.done = true;
          this.init();
          this.messages.unshift(this.title);
          this.init_protagonist();
          this.init_scores();
          this.set_message();
          this.bundle_objects();
        }

        Level.prototype.starting_position = function() {
          return [this.start_x, this.start_y];
        };

        Level.prototype.init_protagonist = function() {
          var x, y, _ref;
          _ref = this.starting_position(), x = _ref[0], y = _ref[1];
          return this.protagonist = new Rocket(this.game, x, y);
        };

        Level.prototype.set_message = function() {
          if (this.messages && this.messages.length) {
            this.message_banner = new Banner(this.game, this.messages.shift());
            return this.message_banner.fade();
          } else {
            return this.message_banner = void 0;
          }
        };

        Level.prototype.bundle_objects = function() {
          var collection, item, _i, _len, _ref, _results;
          _ref = [this.goals, this.barriers, this.scores, [this.protagonist]];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            collection = _ref[_i];
            _results.push((function() {
              var _j, _len1, _results1;
              _results1 = [];
              for (_j = 0, _len1 = collection.length; _j < _len1; _j++) {
                item = collection[_j];
                _results1.push(this.objects.push(item));
              }
              return _results1;
            }).call(this));
          }
          return _results;
        };

        Level.prototype.init_scores = function() {
          var score, type, _i, _len, _ref, _results;
          this.score_manager.reset();
          if (this.no_score) {
            return;
          }
          _ref = this.score_manager.types();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            type = _ref[_i];
            _results.push(score = this.add_score(type));
          }
          return _results;
        };

        Level.prototype.add_goal = function(x, y, r) {
          var i;
          i = new Goal(this.game, x, y, r);
          this.goals.push(i);
          return i;
        };

        Level.prototype.add_barrier = function(x, y, r) {
          var i;
          i = new Barrier(this.game, x, y, r);
          this.barriers.push(i);
          return i;
        };

        Level.prototype.add_score = function(type) {
          var i;
          i = new Score(this.game, type);
          this.scores.push(i);
          if (this.highlight_score && this.highlight_score === type) {
            i.highlight = true;
          }
          return i;
        };

        Level.prototype.step = function() {
          var obj, _i, _len, _ref;
          _ref = this.objects;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj = _ref[_i];
            obj.step();
          }
          if (this.message_banner) {
            this.message_banner.step();
            if (this.message_banner.done()) {
              return this.set_message();
            }
          }
        };

        Level.prototype.draw = function(graphics) {
          var obj, _i, _len, _ref;
          _ref = this.objects;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj = _ref[_i];
            obj.draw(graphics);
          }
          if (this.message_banner) {
            return this.message_banner.draw(graphics);
          }
        };

        Level.prototype.won = function() {
          var goal, _i, _len, _ref;
          if (this.done) {
            _ref = this.goals;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              goal = _ref[_i];
              if (!goal.done()) {
                return false;
              }
            }
            this.messages = [this.success_message];
            this.set_message();
            return true;
          }
        };

        Level.prototype.begin = function() {
          var collection, item, _i, _len, _ref, _results;
          _ref = [this.goals, this.barriers, this.scores, [this.protagonist]];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            collection = _ref[_i];
            _results.push((function() {
              var _j, _len1, _results1;
              _results1 = [];
              for (_j = 0, _len1 = collection.length; _j < _len1; _j++) {
                item = collection[_j];
                _results1.push(item.reset());
              }
              return _results1;
            })());
          }
          return _results;
        };

        Level.prototype.outro_done = function() {
          var item, _i, _len, _ref;
          _ref = this.objects;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (item.outro_done && !item.outro_done()) {
              return false;
            }
          }
          return true;
        };

        Level.prototype.outro_step = function() {
          var item, _i, _len, _ref;
          _ref = this.objects;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (item.outro_step && !item.outro_done()) {
              return item.outro_step();
            }
          }
        };

        Level.prototype.outro_draw = function(graphics) {
          var item, _i, _len, _ref, _results;
          _ref = this.objects;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (item.outro_draw) {
              _results.push(item.outro_draw(graphics));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        return Level;

      })();
    };
  })(this));

}).call(this);
