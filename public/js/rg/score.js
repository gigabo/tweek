// Generated by CoffeeScript 1.8.0
(function() {
  require.def(['rg/debug', 'rg/score_manager'], (function(_this) {
    return function(Debug, ScoreManager) {
      var Score;
      return Score = (function() {
        function Score(game, type) {
          this.game = game;
          this.type = type;
          this.off_screen = false;
          this.slide_stride = 10;
          this.wait = 0;
          this.outro_wait = 20;
          this.hud_on_y_pos = this.game.height - 20;
          this.hud_off_y_pos = this.game.height + 20;
          this.y_pos = this.game.hud_on ? this.hud_on_y_pos : this.hud_off_y_pos;
          this.queue = [];
          this.manager = new ScoreManager;
          if (this.type !== 'total') {
            this.manager.register(this);
          }
          this.load_strategy();
        }

        Score.prototype.load_strategy = function() {
          return require(["rg/score_" + this.type], (function(_this) {
            return function(Strategy) {
              return _this.strategy = new Strategy(_this.game);
            };
          })(this));
        };

        Score.prototype.value = function() {
          return this.strategy.value;
        };

        Score.prototype.dispatch = function(method) {
          var catchup;
          if (this.strategy) {
            if (this.queue) {
              while (catchup = this.queue.shift()) {
                this.strategy[catchup]();
              }
              this.queue = false;
            }
            return this.strategy[method]();
          } else {
            return this.queue.push(method);
          }
        };

        Score.prototype.reset = function() {
          return this.dispatch('reset');
        };

        Score.prototype.step = function() {
          this.off_screen = false;
          this.dispatch('step');
          if (this.highlight) {
            return this.y_pos = this.hud_on_y_pos;
          } else {
            if (this.game.show_hud()) {
              return this.raise();
            } else {
              if (this.y_pos < this.hud_off_y_pos) {
                return this.y_pos += this.slide_stride;
              } else {
                return this.off_screen = true;
              }
            }
          }
        };

        Score.prototype.raise = function() {
          if (this.y_pos > this.hud_on_y_pos) {
            this.y_pos -= this.slide_stride;
          }
          if (this.y_pos < this.hud_on_y_pos) {
            return this.y_pos = this.hud_on_y_pos;
          }
        };

        Score.prototype.draw = function(graphics) {
          var ctx;
          if (this.off_screen && !this.game.in_transition() && !this.highlight) {
            return;
          }
          ctx = graphics.ctx;
          ctx.font = "20pt Verdana";
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillStyle = this.strategy.color();
          graphics.text(this.strategy.value, this.strategy.x_pos(), this.y_pos);
          if (this.highlight) {
            ctx.strokeStyle = this.strategy.color();
            ctx.lineWidth = 5;
            return graphics.rect_stroke_rounded(this.strategy.x_pos() - 100, this.y_pos - 22, 200, 40, 10);
          }
        };

        Score.prototype.outro_step = function() {
          return this.raise();
        };

        Score.prototype.outro_draw = function(g) {
          return this.draw(g);
        };

        Score.prototype.outro_done = function() {
          return this.y_pos <= this.hud_on_y_pos && (this.game.hud_on || this.wait++ > this.outro_wait);
        };

        return Score;

      })();
    };
  })(this));

}).call(this);
