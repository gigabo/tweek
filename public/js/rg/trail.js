// Generated by CoffeeScript 1.8.0
(function() {
  require.def((function(_this) {
    return function() {
      var Trail;
      return Trail = (function() {
        function Trail(game, owner) {
          this.game = game;
          this.owner = owner;
          this.pieces = [];
          this.length = 20;
          this.controls = this.game.controls;
        }

        Trail.prototype.step = function() {
          var i, m, oa, ol, ox, oy, piece, x1, x2, y1, y2, _i, _len, _ref, _results;
          if (this.controls.thrust_on()) {
            ox = this.owner.x;
            oy = this.owner.y;
            oa = this.owner.a;
            ol = this.owner.length;
            x1 = ox + ol / 2 * Math.cos(oa);
            y1 = oy + ol / 2 * Math.sin(oa);
            x2 = ox + ol * Math.cos(oa);
            y2 = oy + ol * Math.sin(oa);
            this.pieces.unshift({
              x: x1,
              y: y1,
              l: 10,
              a: oa,
              ttl: this.length
            });
          }
          if (this.pieces.length > 0 && this.pieces[this.pieces.length - 1].ttl === 0) {
            this.pieces.pop();
          }
          i = this.length;
          _ref = this.pieces;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            piece = _ref[_i];
            m = i / ((this.length / 10) + 1);
            piece.x += m * Math.cos(piece.a);
            piece.y += m * Math.sin(piece.a);
            piece.a += (Math.random() - .5) * .5;
            piece.ttl -= 1;
            _results.push(i--);
          }
          return _results;
        };

        Trail.prototype.piece_line = function(p) {
          return [p.x, p.y, p.x + p.l * Math.cos(p.a), p.y + p.l * Math.sin(p.a)];
        };

        Trail.prototype.draw = function(graphics) {
          var a, c, ctx, piece, x1, x2, y1, y2, _i, _len, _ref, _ref1, _results;
          ctx = graphics.ctx;
          ctx.lineWidth = this.owner.length / 10;
          _ref = this.pieces;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            piece = _ref[_i];
            a = piece.ttl / this.length;
            c = Math.floor(255 * (1 - a));
            ctx.strokeStyle = "rgba(255, " + c + ", " + c + ", " + a + ")";
            _ref1 = this.piece_line(piece), x1 = _ref1[0], y1 = _ref1[1], x2 = _ref1[2], y2 = _ref1[3];
            _results.push(graphics.line(x1, y1, x2, y2));
          }
          return _results;
        };

        return Trail;

      })();
    };
  })(this));

}).call(this);
